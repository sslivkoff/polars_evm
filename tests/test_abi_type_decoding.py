from __future__ import annotations

import json
import typing
import pytest
import polars as pl
import polars_evm

# tools
# - https://abi.hashex.org/


example_values = {
    'address': [
        (
            '0x5b38da6a701c568545dcfcb03fcb875f56beddc4',
            '0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4',
        ),
        (
            '0x5b38da6a701c568545dcfcb03fcb875f56beddc4',
            '0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4',
        ),
    ],
    'uint': [
        (
            127.0,
            '000000000000000000000000000000000000000000000000000000000000007f',
        ),
        (
            127.0,
            '0x000000000000000000000000000000000000000000000000000000000000007f',
        ),
    ],
    'uint32': [
        (
            127.0,
            '000000000000000000000000000000000000000000000000000000000000007f',
        ),
        (
            127.0,
            '0x000000000000000000000000000000000000000000000000000000000000007f',
        ),
    ],
    # https://medium.com/coinmonks/abi-encode-and-decode-using-solidity-2d372a03e110
    '(address,uint)': [
        (
            ('0x5b38da6a701c568545dcfcb03fcb875f56beddc4', 127.0),
            '0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4000000000000000000000000000000000000000000000000000000000000007f',
        )
    ],
    '(string,uint,string)': [
        (
            ('Jo√£o', 3, 'Paulo'),
            '0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000054a6fc3a36f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055061756c6f000000000000000000000000000000000000000000000000000000',
        ),
    ],
    # https://docs.soliditylang.org/en/latest/abi-spec.html#examples
    'bytes3[2]': [
        (
            [
                '0x' + 'abc'.encode('ascii').hex(),
                '0x' + 'def'.encode('ascii').hex(),
            ],
            '0x61626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000',
        ),
    ],
    '(uint32,bool)': [
        (
            (69, True),
            '0x00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001',
        ),
    ],
    '(bytes memory,bool,uint[])': [
        (
            ('0x' + 'dave'.encode('ascii').hex(), True, [1, 2, 3]),
            '0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003',
        ),
    ],
    # https://docs.soliditylang.org/en/latest/abi-spec.html#use-of-dynamic-types
    '(uint256,uint32[],bytes10,bytes)': [
        (
            (
                0x123,
                [0x456, 0x789],
                '0x' + '1234567890'.encode('ascii').hex(),
                '0x' + 'Hello, world!'.encode('ascii').hex(),
            ),
            '0x00000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000080313233343536373839300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789000000000000000000000000000000000000000000000000000000000000000d48656c6c6f2c20776f726c642100000000000000000000000000000000000000',
        ),
    ],
    '(uint256[][],string[])': [
        (
            (
                [[1, 2], [3]],
                [
                    'one'.encode('ascii').hex(),
                    'two'.encode('ascii').hex(),
                    'three'.encode('ascii').hex(),
                ],
            ),
            '0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000',
        ),
    ],
}

decoding_tests = []
for abi_type in example_values.keys():
    for target_output, raw_bytes in example_values[abi_type]:
        test = (abi_type, target_output, raw_bytes)
        decoding_tests.append(test)

# https://github.com/sslivkoff/eth-abi-lite/blob/6b73232812b10dfe8379576e2e77b733e4891a81/tests/common/unit.py#L407
decoding_tests += [
    ['()', (), '0x'],
    ['((),((),((),())))', ((), ((), ((), ()))), '0x'],
    [
        '(uint32)',
        (6,),
        '0x0000000000000000000000000000000000000000000000000000000000000006',
    ],
    [
        '(uint32,uint32)',
        (4294967295, 4294967295),
        '0x00000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000000ffffffff',
    ],
    [
        '(bytes32,bytes32)',
        (
            '0x6100000000000000000000000000000000000000000000000000000000000000',
            '0x6200000000000000000000000000000000000000000000000000000000000000',
        ),
        '0x61000000000000000000000000000000000000000000000000000000000000006200000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        '(address,uint32,bytes32,int32)',
        (
            '0x82a978b3f5962a5b0957d9ee9eef472ee55b42f1',
            1,
            '0x7374757069642070696e6b20616e696d616c0000000000000000000000000000',
            0,
        ),
        '0x00000000000000000000000082a978b3f5962a5b0957d9ee9eef472ee55b42f100000000000000000000000000000000000000000000000000000000000000017374757069642070696e6b20616e696d616c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        '(bytes32[])',
        (
            [
                '0x6100000000000000000000000000000000000000000000000000000000000000',
                '0x6200000000000000000000000000000000000000000000000000000000000000',
            ],
        ),
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000261000000000000000000000000000000000000000000000000000000000000006200000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        '(uint256,bytes)',
        (0.0, '0x'),
        '0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        '(int,(int,int[]))',
        (1.0, (2.0, [3.0, 3.0])),
        '0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003',
    ],
    [
        '((int[],int),int)',
        (([1.0, 1.0], 2.0), 3.0),
        '0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        '((bytes,bool),(bytes,bool))',
        (
            ('0x646176696420617474656e626f726f756768', False),
            ('0x626f617479206d63626f617466616365', True),
        ),
        '0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012646176696420617474656e626f726f7567680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000010626f617479206d63626f61746661636500000000000000000000000000000000',
    ],
    [
        '((int,int)[])',
        ([(1.0, 2.0), (3.0, 4.0)],),
        '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004',
    ],
    [
        '((int,int[],(int,int)[]),(int,int),int)',
        ((1.0, [2.0, 3.0], [(4.0, 5.0), (6.0, 7.0)]), (8.0, 9.0), 10.0),
        '0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c
    ],
    [
        '(int,int)[][]',
        [
            [(1.0, 2.0)],
            [(3.0, 4.0), (5.0, 6.0)],
            [(7.0, 8.0), (9.0, 10.0), (11.0, 12.0)],
        ],
        '0x0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000ca000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c',
    ],
    [
        '((int,int)[][2])',
        ([[(1.0, 2.0), (3.0, 4.0)], [(5.0, 6.0), (7.0, 8.0), (9.0, 10.0)]],),
        '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea',
    ],
    [
        'uint8',
        255,
        '0x00000000000000000000000000000000000000000000000000000000000000ff',
    ],
    [
        'uint8',
        21,
        '0x0000000000000000000000000000000000000000000000000000000000000015',
    ],
    [
        'uint8',
        1,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'uint256',
        1.157920892373162e77,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    ],
    [
        'uint256',
        1.157920892373162e77,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c',
    ],
    [
        'uint256',
        21.0,
        '0x0000000000000000000000000000000000000000000000000000000000000015',
    ],
    [
        'uint256',
        1.0,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'int8',
        21,
        '0x0000000000000000000000000000000000000000000000000000000000000015',
    ],
    [
        'int8',
        1,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'int8',
        -1,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    ],
    [
        'int8',
        -100,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c',
    ],
    [
        'int256',
        21.0,
        '0x0000000000000000000000000000000000000000000000000000000000000015',
    ],
    [
        'int256',
        1.0,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'int256',
        -1.0,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    ],
    [
        'int256',
        -100.0,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c',
    ],
    [
        'address',
        '0x0000000000000000000000000000000000000000',
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'address',
        '0xd3cda913deb6f67967b99d67acdfa1712c293601',
        '0x000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601',
    ],
    [
        'address',
        '0x0005c901078781c232a2a521c2af7980f8385ee9',
        '0x0000000000000000000000000005c901078781c232a2a521c2af7980f8385ee9',
    ],
    [
        'address',
        '0x5c901078781c232a2a521c2af7980f8385ee9000',
        '0x0000000000000000000000005c901078781c232a2a521c2af7980f8385ee9000',
    ],
    [
        'uint',
        1.157920892373162e77,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    ],
    [
        'uint',
        1.157920892373162e77,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c',
    ],
    [
        'uint',
        21.0,
        '0x0000000000000000000000000000000000000000000000000000000000000015',
    ],
    [
        'uint',
        1.0,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'int',
        21.0,
        '0x0000000000000000000000000000000000000000000000000000000000000015',
    ],
    [
        'int',
        1.0,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'int',
        -1.0,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    ],
    [
        'int',
        -100.0,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c',
    ],
    [
        'bool',
        True,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'bool',
        False,
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'fixed8x1',
        12.7,
        '0x000000000000000000000000000000000000000000000000000000000000007f',
    ],
    [
        'fixed8x1',
        0.1,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'fixed8x1',
        0.0,
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'fixed8x1',
        -0.1,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    ],
    [
        'fixed8x1',
        -12.8,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80',
    ],
    [
        'fixed128x18',
        1.27e-16,
        '0x000000000000000000000000000000000000000000000000000000000000007f',
    ],
    [
        'fixed128x18',
        1e-18,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'fixed128x18',
        0.0,
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'fixed128x18',
        -1e-18,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    ],
    [
        'fixed128x18',
        -1.28e-16,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80',
    ],
    [
        'fixed256x80',
        1.27e-78,
        '0x000000000000000000000000000000000000000000000000000000000000007f',
    ],
    [
        'fixed256x80',
        1e-80,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'fixed256x80',
        0.0,
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'fixed256x80',
        -1e-80,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    ],
    [
        'fixed256x80',
        -1.28e-78,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80',
    ],
    [
        'ufixed8x1',
        25.5,
        '0x00000000000000000000000000000000000000000000000000000000000000ff',
    ],
    [
        'ufixed8x1',
        25.4,
        '0x00000000000000000000000000000000000000000000000000000000000000fe',
    ],
    [
        'ufixed8x1',
        0.1,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'ufixed8x1',
        0.0,
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'ufixed128x18',
        2.55e-16,
        '0x00000000000000000000000000000000000000000000000000000000000000ff',
    ],
    [
        'ufixed128x18',
        2.54e-16,
        '0x00000000000000000000000000000000000000000000000000000000000000fe',
    ],
    [
        'ufixed128x18',
        1e-18,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'ufixed128x18',
        0.0,
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'ufixed256x80',
        2.55e-78,
        '0x00000000000000000000000000000000000000000000000000000000000000ff',
    ],
    [
        'ufixed256x80',
        2.54e-78,
        '0x00000000000000000000000000000000000000000000000000000000000000fe',
    ],
    [
        'ufixed256x80',
        1e-80,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'ufixed256x80',
        0.0,
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'fixed',
        1.27e-16,
        '0x000000000000000000000000000000000000000000000000000000000000007f',
    ],
    [
        'fixed',
        1e-18,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'fixed',
        0.0,
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'fixed',
        -1e-18,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
    ],
    [
        'fixed',
        -1.28e-16,
        '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80',
    ],
    [
        'ufixed',
        2.55e-16,
        '0x00000000000000000000000000000000000000000000000000000000000000ff',
    ],
    [
        'ufixed',
        2.54e-16,
        '0x00000000000000000000000000000000000000000000000000000000000000fe',
    ],
    [
        'ufixed',
        1e-18,
        '0x0000000000000000000000000000000000000000000000000000000000000001',
    ],
    [
        'ufixed',
        0.0,
        '0x0000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'bytes32',
        '0x7465737400000000000000000000000000000000000000000000000000000000',
        '0x7465737400000000000000000000000000000000000000000000000000000000',
    ],
    [
        'bytes32',
        '0x6162636465666768696a6b6c6d6e6f707172737475767778797a000000000000',
        '0x6162636465666768696a6b6c6d6e6f707172737475767778797a000000000000',
    ],
    [
        'bytes32',
        '0x3031323334353637383921402324255e262a2829000000000000000000000000',
        '0x3031323334353637383921402324255e262a2829000000000000000000000000',
    ],
    [
        'bytes32',
        '0x6162630000000000616263000000000000000000000000000000000000000000',
        '0x6162630000000000616263000000000000000000000000000000000000000000',
    ],
    [
        'bytes1',
        '0x61',
        '0x6100000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'bytes',
        '0x',
        '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
    ],
    [
        'bytes',
        '0xde',
        '0x0000000000000000000000000000000000000000000000000000000000000001de00000000000000000000000000000000000000000000000000000000000000',
    ],
]


# skip nested arrays
decoding_tests = [test for test in decoding_tests if '][' not in test[0]]


def decode_value(value: str, abi_type: str) -> typing.Any:
    return decode_values([value], abi_type)[0]


def decode_values(
    values: typing.Sequence[str], abi_type: str
) -> list[typing.Any]:
    df = pl.DataFrame({'as_hex': pl.Series(values, dtype=pl.String)})
    output = df.evm.decode({'as_hex': abi_type})['as_hex_decoded'].to_list()
    abi_type = polars_evm._helpers.decoding_types.parse_abi_type(abi_type)
    if abi_type['tuple_types'] is not None:
        output = [_flatten(abi_type, item) for item in output]
    return output


def _flatten(abi_type, item):
    outputs = []
    for value, subtype in zip(item.values(), abi_type['tuple_types']):
        if subtype['tuple_types'] is not None:
            outputs.append(_flatten(subtype, value))
        else:
            outputs.append(value)
    return tuple(outputs)


@pytest.mark.parametrize('test', decoding_tests)
def test_abi_decoding(test: tuple[str, typing.Any, str]) -> None:
    abi_type, target_output, raw_bytes = test

    parsed_abi_type = polars_evm._helpers.decoding_types.parse_abi_type(
        abi_type
    )
    print(abi_type)
    print()
    print(json.dumps(parsed_abi_type, indent=4, sort_keys=True))
    print()
    print(
        '\n'.join(
            raw_bytes[2:][i * 64 : (i + 1) * 64]
            for i in range(len(raw_bytes) // 64)
        )
    )

    actual_output = decode_value(raw_bytes, abi_type)
    assert actual_output == target_output
