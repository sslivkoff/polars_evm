from __future__ import annotations

import typing
import pytest
import polars as pl
import polars_evm

# tools
# - https://abi.hashex.org/


example_values = {
    'address': [
        (
            '0x5b38da6a701c568545dcfcb03fcb875f56beddc4',
            '0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4',
        ),
        (
            '0x5b38da6a701c568545dcfcb03fcb875f56beddc4',
            '0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4',
        ),
    ],
    'uint': [
        (
            127.0,
            '000000000000000000000000000000000000000000000000000000000000007f',
        ),
        (
            127.0,
            '0x000000000000000000000000000000000000000000000000000000000000007f',
        ),
    ],
    'uint32': [
        (
            127.0,
            '000000000000000000000000000000000000000000000000000000000000007f',
        ),
        (
            127.0,
            '0x000000000000000000000000000000000000000000000000000000000000007f',
        ),
    ],
    # https://medium.com/coinmonks/abi-encode-and-decode-using-solidity-2d372a03e110
    '(address,uint)': [
        (
            ('0x5b38da6a701c568545dcfcb03fcb875f56beddc4', 127.0),
            '0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4000000000000000000000000000000000000000000000000000000000000007f',
        )
    ],
    '(string,uint,string)': [
        (
            ('JoÃ£o', 3, 'Paulo'),
            '0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000054a6fc3a36f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055061756c6f000000000000000000000000000000000000000000000000000000',
        ),
    ],
    # https://docs.soliditylang.org/en/latest/abi-spec.html#examples
    'bytes3[2]': [
        (
            [
                '0x' + 'abc'.encode('ascii').hex(),
                '0x' + 'def'.encode('ascii').hex(),
            ],
            '0x61626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000',
        ),
    ],
    '(uint32,bool)': [
        (
            (69, True),
            '0x00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001',
        ),
    ],
    '(bytes memory,bool,uint[])': [
        (
            ('0x' + 'dave'.encode('ascii').hex(), True, [1, 2, 3]),
            '0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003',
        ),
    ],
    # https://docs.soliditylang.org/en/latest/abi-spec.html#use-of-dynamic-types
    '(uint256,uint32[],bytes10,bytes)': [
        (
            (
                0x123,
                [0x456, 0x789],
                '1234567890',
                'Hello, world!'.encode('ascii').hex(),
            ),
            '0x00000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000080313233343536373839300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789000000000000000000000000000000000000000000000000000000000000000d48656c6c6f2c20776f726c642100000000000000000000000000000000000000',
        ),
    ],
    '(uint256[][],string[])': [
        (
            (
                [[1, 2], [3]],
                [
                    'one'.encode('ascii').hex(),
                    'two'.encode('ascii').hex(),
                    'three'.encode('ascii').hex(),
                ],
            ),
            '0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000',
        ),
    ],
}

decoding_tests = []
for abi_type in example_values.keys():
    for target_output, raw_bytes in example_values[abi_type]:
        test = (abi_type, target_output, raw_bytes)
        decoding_tests.append(test)


def decode_value(value: str, abi_type: str) -> typing.Any:
    return decode_values([value], abi_type)[0]


def decode_values(
    values: typing.Sequence[str], abi_type: str
) -> list[typing.Any]:
    df = pl.DataFrame({'as_hex': pl.Series(values, dtype=pl.String)})
    output = df.evm.decode({'as_hex': abi_type})['as_hex_decoded'].to_list()
    if abi_type.startswith('('):
        output = [tuple(item.values()) for item in output]
    return output


@pytest.mark.parametrize('test', decoding_tests)
def test_abi_decoding(test: tuple[str, typing.Any, str]) -> None:
    abi_type, target_output, raw_bytes = test
    actual_output = decode_value(raw_bytes, abi_type)
    assert actual_output == target_output
